<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/jee
	http://www.springframework.org/schema/jee/spring-jee-3.1.xsd">
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.thsword.netjob">
    	<context:exclude-filter type="regex" expression="com.thsword.netjob.web"/>
    </context:component-scan>
    
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <!-- <property name="location" value="classpath:config/dataSource.properties" />   -->
        <property name="locations">
        	<array>  
            	<value>classpath:properties/dataSource.properties</value>
            	<value>classpath:properties/netjob.properties</value>  
            	<value>classpath:properties/redis.properties</value>  
        	</array>  
    	</property>  
    </bean>  
  
<!--     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${driverClassName}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        初始化连接大小  
        <property name="initialSize" value="${initialSize}"></property>  
        连接池最大数量  
        <property name="maxActive" value="${maxActive}"></property>  
        连接池最大空闲  
        <property name="maxIdle" value="${maxIdle}"></property>  
        连接池最小空闲  
        <property name="minIdle" value="${minIdle}"></property>  
        获取连接最大等待时间  
        <property name="maxWait" value="${maxWait}"></property>  
    </bean>  --> 
    
     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  
        destroy-method="close">  
        <property name="driverClass" value="${driverClassName}" />  
        <property name="jdbcUrl" value="${url}" />  
        <property name="user" value="${username}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialPoolSize" value="${initialPoolSize}"></property>  
       	<!-- 连接池最大数量   -->
        <property name="maxPoolSize" value="${maxPoolSize}"></property> 
       	<!-- 最小连接数   -->
        <property name="minPoolSize" value="${minPoolSize}"></property>  
        <!-- 最小连接数   -->
        <property name="maxIdleTime" value="${maxIdleTime}"></property>  
        <!-- 定期检查连接有效性   -->
        <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"></property> 
    </bean> 
    
    <bean id="paginationInterceptor"
		class="com.thsword.netjob.web.filter.PaginationInterceptor" />
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="plugins" ref="paginationInterceptor" />
        <property name="configLocation" value="classpath:mybatis/config.xml" />
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.thsword.netjob.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    <!-- 使用基于注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
		
		
		<!--要调度的对象-->  
    <!-- <bean id="jobBean" class="com.ims.web.job.CodeJob" />  
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <property name="targetObject" ref="jobBean" />  
        <property name="targetMethod" value="execute" />  
        将并发设置为false  
        <property name="concurrent" value="false" />  
    </bean>  
  
    <bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail" ref="jobDetail" />  
        表达式，我的是每 30s 执行一次  
        <property name="cronExpression" value="0 0 0/1 * * ?" />  
    </bean>  
  
     总管理类如果将lazy-init='false'那么容器启动就会执行调度程序    
    <bean id="startQuertz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false" >  
        <property name="triggers">  
            <list>  
                作业调度器,list下可加入其他的调度器  
                <ref bean="trigger" />  
            </list>  
        </property>  
    </bean>  -->
    <import resource="spring-redis.xml"/>
</beans>  